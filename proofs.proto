syntax = "proto3";

package proofs;

enum HashOp {
    // NO_HASH is the default if no data passed. Note this is an illegal argument some places.
    NO_HASH = 0;
    SHA256 = 1;
    SHA512 = 2;
    KECCAK = 3;
}

/**
LengthOp defines how to process the key and value of the LeafOp
to include length information. After encoding the length with the given
algorithm, the length will be prepended to the key and value bytes.
(Each one with it's own encoded length)
*/
enum LengthOp {
    // NO_PREFIX don't include any length info
    NO_PREFIX = 0; 
    // VAR_PROTO uses protobuf (and go-amino) varint encoding of the length
    VAR_PROTO = 1; 
    // VAR_RLP uses rlp int encoding of the length (TODO: is this different than protobuf?)
    VAR_RLP = 2; 
    // FIXED32_BIG uses big-endian encoding of the length as a 32 bit integer
    FIXED32_BIG = 3; 
    // FIXED32_LITTLE uses little-endian encoding of the length as a 32 bit integer
    FIXED32_LITTLE = 4; 
    // FIXED64_BIG uses big-endian encoding of the length as a 64 bit integer
    FIXED64_BIG = 5;
    // FIXED64_LITTLE uses little-endian encoding of the length as a 64 bit integer
    FIXED64_LITTLE = 6;
    // REQUIRE_32_BYTES is like NONE, but will fail if the input is not exactly 32 bytes (sha256 output)
    REQUIRE_32_BYTES = 7;
    // REQUIRE_64_BYTES is like NONE, but will fail if the input is not exactly 64 bytes (sha512 output)
    REQUIRE_64_BYTES = 8;
}

/**
ExistenceProof takes a key and a value and a set of steps to perform on it.
The result of peforming all these steps will provide a "root hash", which can
be compared to the value in a header.

Since it is computationally infeasible to produce a hash collission for any of the used
cryptographic hash functions, if someone can provide a series of operations to transform
a given key and value into a root hash that matches some trusted root, these key and values
must be in the referenced merkle tree.

The only possible issue is maliablity in LeafOp, such as providing extra prefix data,
which should be controlled by a spec. Eg. with lengthOp as NONE,
  prefix = FOO, key = BAR, value = CHOICE
and
  prefix = F, key = OOBAR, value = CHOICE
would produce the same value.

With LengthOp this is tricker but not impossible. Which is why the "leafPrefixEqual" field
in the ProofSpec is valuable to prevent this mutability. And why all trees should
length-prefix the data before hashing it.
*/
message ExistenceProof {
    bytes key = 1;
    bytes value = 2;
    repeated ProofOp steps = 3;    
}

/**
ProofOp is directions to peform one step of the merkle proof
*/
message ProofOp {
    oneof op {
        LeafOp leaf = 1;
        InnerOp inner = 2;
    }
}

/**
LeafOp represents the raw key-value data we wish to prove, and
must be flexible to represent the internal transformation from
the original key-value pairs into the basis hash, for many existing
merkle trees.

key and value are passed in. So that the signature of this operation is:
  leafOp(key, value) -> output

To process this, first prehash the keys and values if needed (ANY means no hash in this case):
  hkey = prehashKey(key)
  hvalue = prehashValue(value)

Then combine the bytes, and hash it
  output = hash(prefix || length(hkey) || hkey || length(hvalue) || hvalue)
*/
message LeafOp {
    HashOp hash = 1;
    HashOp prehash_key = 2;
    HashOp prehash_value = 3;
    LengthOp length = 4;
    // prefix is a fixed bytes that may optionally be included at the beginning to differentiate
    // a leaf node from an inner node.
    bytes prefix = 5;
}

/**
InnerOp represents a merkle-proof step that is not a leaf.
It represents concatenating two children and hashing them to provide the next result.

The result of the previous step is passed in, so the signature of this op is:
  innerOp(child) -> output

The result of applying InnerOp should be:
  output = op.hash(op.prefix || child || op.suffix)

  where the || operator is concatenation of binary data,
and child is the result of hashing all the tree below this step.

Any special data, like prepending child with the length, or prepending the entire operation with
some value to differentiate from leaf nodes, should be included in prefix and suffix.
If either of prefix or suffix is empty, we just treat it as an empty string
*/
message InnerOp {
    HashOp hash = 1;
    bytes prefix = 2;
    bytes suffix = 3;
}


/**
ProofSpec defines what the expected parameters are for a given proof type.
This can be stored in the client and used to validate any incoming proofs.

  verify(ProofSpec, Proof) -> Proof | Error

This verify function could (as an optimization) fill in "ANY" HashOps with
the externally provided one from the spec.
*/
message ProofSpec {
    HashOp leafHash = 1;
    HashOp innerHash = 2;
    bytes leafPrefixEqual = 3;
    bytes innerPrefixStartsWith = 4;
}