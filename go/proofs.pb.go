// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proofs.proto

package proofs

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type HashOp int32

const (
	// NO_HASH is the default if no data passed. Note this is an illegal argument some places.
	HashOp_NO_HASH   HashOp = 0
	HashOp_SHA256    HashOp = 1
	HashOp_SHA512    HashOp = 2
	HashOp_KECCAK    HashOp = 3
	HashOp_RIPEMD160 HashOp = 4
	HashOp_BITCOIN   HashOp = 5
)

var HashOp_name = map[int32]string{
	0: "NO_HASH",
	1: "SHA256",
	2: "SHA512",
	3: "KECCAK",
	4: "RIPEMD160",
	5: "BITCOIN",
}

var HashOp_value = map[string]int32{
	"NO_HASH":   0,
	"SHA256":    1,
	"SHA512":    2,
	"KECCAK":    3,
	"RIPEMD160": 4,
	"BITCOIN":   5,
}

func (x HashOp) String() string {
	return proto.EnumName(HashOp_name, int32(x))
}

func (HashOp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_855156e15e7b8e99, []int{0}
}

//*
//LengthOp defines how to process the key and value of the LeafOp
//to include length information. After encoding the length with the given
//algorithm, the length will be prepended to the key and value bytes.
//(Each one with it's own encoded length)
type LengthOp int32

const (
	// NO_PREFIX don't include any length info
	LengthOp_NO_PREFIX LengthOp = 0
	// VAR_PROTO uses protobuf (and go-amino) varint encoding of the length
	LengthOp_VAR_PROTO LengthOp = 1
	// VAR_RLP uses rlp int encoding of the length (TODO: is this different than protobuf?)
	LengthOp_VAR_RLP LengthOp = 2
	// FIXED32_BIG uses big-endian encoding of the length as a 32 bit integer
	LengthOp_FIXED32_BIG LengthOp = 3
	// FIXED32_LITTLE uses little-endian encoding of the length as a 32 bit integer
	LengthOp_FIXED32_LITTLE LengthOp = 4
	// FIXED64_BIG uses big-endian encoding of the length as a 64 bit integer
	LengthOp_FIXED64_BIG LengthOp = 5
	// FIXED64_LITTLE uses little-endian encoding of the length as a 64 bit integer
	LengthOp_FIXED64_LITTLE LengthOp = 6
	// REQUIRE_32_BYTES is like NONE, but will fail if the input is not exactly 32 bytes (sha256 output)
	LengthOp_REQUIRE_32_BYTES LengthOp = 7
	// REQUIRE_64_BYTES is like NONE, but will fail if the input is not exactly 64 bytes (sha512 output)
	LengthOp_REQUIRE_64_BYTES LengthOp = 8
)

var LengthOp_name = map[int32]string{
	0: "NO_PREFIX",
	1: "VAR_PROTO",
	2: "VAR_RLP",
	3: "FIXED32_BIG",
	4: "FIXED32_LITTLE",
	5: "FIXED64_BIG",
	6: "FIXED64_LITTLE",
	7: "REQUIRE_32_BYTES",
	8: "REQUIRE_64_BYTES",
}

var LengthOp_value = map[string]int32{
	"NO_PREFIX":        0,
	"VAR_PROTO":        1,
	"VAR_RLP":          2,
	"FIXED32_BIG":      3,
	"FIXED32_LITTLE":   4,
	"FIXED64_BIG":      5,
	"FIXED64_LITTLE":   6,
	"REQUIRE_32_BYTES": 7,
	"REQUIRE_64_BYTES": 8,
}

func (x LengthOp) String() string {
	return proto.EnumName(LengthOp_name, int32(x))
}

func (LengthOp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_855156e15e7b8e99, []int{1}
}

//*
//ExistenceProof takes a key and a value and a set of steps to perform on it.
//The result of peforming all these steps will provide a "root hash", which can
//be compared to the value in a header.
//
//Since it is computationally infeasible to produce a hash collission for any of the used
//cryptographic hash functions, if someone can provide a series of operations to transform
//a given key and value into a root hash that matches some trusted root, these key and values
//must be in the referenced merkle tree.
//
//The only possible issue is maliablity in LeafOp, such as providing extra prefix data,
//which should be controlled by a spec. Eg. with lengthOp as NONE,
//prefix = FOO, key = BAR, value = CHOICE
//and
//prefix = F, key = OOBAR, value = CHOICE
//would produce the same value.
//
//With LengthOp this is tricker but not impossible. Which is why the "leafPrefixEqual" field
//in the ProofSpec is valuable to prevent this mutability. And why all trees should
//length-prefix the data before hashing it.
type ExistenceProof struct {
	Key   []byte     `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte     `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Steps []*ProofOp `protobuf:"bytes,3,rep,name=steps,proto3" json:"steps,omitempty"`
}

func (m *ExistenceProof) Reset()         { *m = ExistenceProof{} }
func (m *ExistenceProof) String() string { return proto.CompactTextString(m) }
func (*ExistenceProof) ProtoMessage()    {}
func (*ExistenceProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_855156e15e7b8e99, []int{0}
}
func (m *ExistenceProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExistenceProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExistenceProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExistenceProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExistenceProof.Merge(m, src)
}
func (m *ExistenceProof) XXX_Size() int {
	return m.Size()
}
func (m *ExistenceProof) XXX_DiscardUnknown() {
	xxx_messageInfo_ExistenceProof.DiscardUnknown(m)
}

var xxx_messageInfo_ExistenceProof proto.InternalMessageInfo

func (m *ExistenceProof) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ExistenceProof) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ExistenceProof) GetSteps() []*ProofOp {
	if m != nil {
		return m.Steps
	}
	return nil
}

//*
//ProofOp is directions to peform one step of the merkle proof
type ProofOp struct {
	// Types that are valid to be assigned to Op:
	//	*ProofOp_Leaf
	//	*ProofOp_Inner
	Op isProofOp_Op `protobuf_oneof:"op"`
}

func (m *ProofOp) Reset()         { *m = ProofOp{} }
func (m *ProofOp) String() string { return proto.CompactTextString(m) }
func (*ProofOp) ProtoMessage()    {}
func (*ProofOp) Descriptor() ([]byte, []int) {
	return fileDescriptor_855156e15e7b8e99, []int{1}
}
func (m *ProofOp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProofOp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProofOp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProofOp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProofOp.Merge(m, src)
}
func (m *ProofOp) XXX_Size() int {
	return m.Size()
}
func (m *ProofOp) XXX_DiscardUnknown() {
	xxx_messageInfo_ProofOp.DiscardUnknown(m)
}

var xxx_messageInfo_ProofOp proto.InternalMessageInfo

type isProofOp_Op interface {
	isProofOp_Op()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProofOp_Leaf struct {
	Leaf *LeafOp `protobuf:"bytes,1,opt,name=leaf,proto3,oneof"`
}
type ProofOp_Inner struct {
	Inner *InnerOp `protobuf:"bytes,2,opt,name=inner,proto3,oneof"`
}

func (*ProofOp_Leaf) isProofOp_Op()  {}
func (*ProofOp_Inner) isProofOp_Op() {}

func (m *ProofOp) GetOp() isProofOp_Op {
	if m != nil {
		return m.Op
	}
	return nil
}

func (m *ProofOp) GetLeaf() *LeafOp {
	if x, ok := m.GetOp().(*ProofOp_Leaf); ok {
		return x.Leaf
	}
	return nil
}

func (m *ProofOp) GetInner() *InnerOp {
	if x, ok := m.GetOp().(*ProofOp_Inner); ok {
		return x.Inner
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ProofOp) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ProofOp_OneofMarshaler, _ProofOp_OneofUnmarshaler, _ProofOp_OneofSizer, []interface{}{
		(*ProofOp_Leaf)(nil),
		(*ProofOp_Inner)(nil),
	}
}

func _ProofOp_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ProofOp)
	// op
	switch x := m.Op.(type) {
	case *ProofOp_Leaf:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Leaf); err != nil {
			return err
		}
	case *ProofOp_Inner:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Inner); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ProofOp.Op has unexpected type %T", x)
	}
	return nil
}

func _ProofOp_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ProofOp)
	switch tag {
	case 1: // op.leaf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LeafOp)
		err := b.DecodeMessage(msg)
		m.Op = &ProofOp_Leaf{msg}
		return true, err
	case 2: // op.inner
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(InnerOp)
		err := b.DecodeMessage(msg)
		m.Op = &ProofOp_Inner{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ProofOp_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ProofOp)
	// op
	switch x := m.Op.(type) {
	case *ProofOp_Leaf:
		s := proto.Size(x.Leaf)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ProofOp_Inner:
		s := proto.Size(x.Inner)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

//*
//LeafOp represents the raw key-value data we wish to prove, and
//must be flexible to represent the internal transformation from
//the original key-value pairs into the basis hash, for many existing
//merkle trees.
//
//key and value are passed in. So that the signature of this operation is:
//leafOp(key, value) -> output
//
//To process this, first prehash the keys and values if needed (ANY means no hash in this case):
//hkey = prehashKey(key)
//hvalue = prehashValue(value)
//
//Then combine the bytes, and hash it
//output = hash(prefix || length(hkey) || hkey || length(hvalue) || hvalue)
type LeafOp struct {
	Hash         HashOp   `protobuf:"varint,1,opt,name=hash,proto3,enum=proofs.HashOp" json:"hash,omitempty"`
	PrehashKey   HashOp   `protobuf:"varint,2,opt,name=prehash_key,json=prehashKey,proto3,enum=proofs.HashOp" json:"prehash_key,omitempty"`
	PrehashValue HashOp   `protobuf:"varint,3,opt,name=prehash_value,json=prehashValue,proto3,enum=proofs.HashOp" json:"prehash_value,omitempty"`
	Length       LengthOp `protobuf:"varint,4,opt,name=length,proto3,enum=proofs.LengthOp" json:"length,omitempty"`
	// prefix is a fixed bytes that may optionally be included at the beginning to differentiate
	// a leaf node from an inner node.
	Prefix []byte `protobuf:"bytes,5,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (m *LeafOp) Reset()         { *m = LeafOp{} }
func (m *LeafOp) String() string { return proto.CompactTextString(m) }
func (*LeafOp) ProtoMessage()    {}
func (*LeafOp) Descriptor() ([]byte, []int) {
	return fileDescriptor_855156e15e7b8e99, []int{2}
}
func (m *LeafOp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeafOp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeafOp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeafOp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeafOp.Merge(m, src)
}
func (m *LeafOp) XXX_Size() int {
	return m.Size()
}
func (m *LeafOp) XXX_DiscardUnknown() {
	xxx_messageInfo_LeafOp.DiscardUnknown(m)
}

var xxx_messageInfo_LeafOp proto.InternalMessageInfo

func (m *LeafOp) GetHash() HashOp {
	if m != nil {
		return m.Hash
	}
	return HashOp_NO_HASH
}

func (m *LeafOp) GetPrehashKey() HashOp {
	if m != nil {
		return m.PrehashKey
	}
	return HashOp_NO_HASH
}

func (m *LeafOp) GetPrehashValue() HashOp {
	if m != nil {
		return m.PrehashValue
	}
	return HashOp_NO_HASH
}

func (m *LeafOp) GetLength() LengthOp {
	if m != nil {
		return m.Length
	}
	return LengthOp_NO_PREFIX
}

func (m *LeafOp) GetPrefix() []byte {
	if m != nil {
		return m.Prefix
	}
	return nil
}

//*
//InnerOp represents a merkle-proof step that is not a leaf.
//It represents concatenating two children and hashing them to provide the next result.
//
//The result of the previous step is passed in, so the signature of this op is:
//innerOp(child) -> output
//
//The result of applying InnerOp should be:
//output = op.hash(op.prefix || child || op.suffix)
//
//where the || operator is concatenation of binary data,
//and child is the result of hashing all the tree below this step.
//
//Any special data, like prepending child with the length, or prepending the entire operation with
//some value to differentiate from leaf nodes, should be included in prefix and suffix.
//If either of prefix or suffix is empty, we just treat it as an empty string
type InnerOp struct {
	Hash   HashOp `protobuf:"varint,1,opt,name=hash,proto3,enum=proofs.HashOp" json:"hash,omitempty"`
	Prefix []byte `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Suffix []byte `protobuf:"bytes,3,opt,name=suffix,proto3" json:"suffix,omitempty"`
}

func (m *InnerOp) Reset()         { *m = InnerOp{} }
func (m *InnerOp) String() string { return proto.CompactTextString(m) }
func (*InnerOp) ProtoMessage()    {}
func (*InnerOp) Descriptor() ([]byte, []int) {
	return fileDescriptor_855156e15e7b8e99, []int{3}
}
func (m *InnerOp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InnerOp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InnerOp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InnerOp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InnerOp.Merge(m, src)
}
func (m *InnerOp) XXX_Size() int {
	return m.Size()
}
func (m *InnerOp) XXX_DiscardUnknown() {
	xxx_messageInfo_InnerOp.DiscardUnknown(m)
}

var xxx_messageInfo_InnerOp proto.InternalMessageInfo

func (m *InnerOp) GetHash() HashOp {
	if m != nil {
		return m.Hash
	}
	return HashOp_NO_HASH
}

func (m *InnerOp) GetPrefix() []byte {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *InnerOp) GetSuffix() []byte {
	if m != nil {
		return m.Suffix
	}
	return nil
}

//*
//ProofSpec defines what the expected parameters are for a given proof type.
//This can be stored in the client and used to validate any incoming proofs.
//
//verify(ProofSpec, Proof) -> Proof | Error
//
//As demonstrated in tests, if we don't fix the algorithm used to calculate the
//LeafHash for a given tree, there are many possible key-value pairs that can
//generate a given hash (by interpretting the preimage differently).
//We need this for proper security, requires client knows a priori what
//tree format server uses. But not in code, rather a configuration object.
type ProofSpec struct {
	// any field in the ExistenceProof must be the same as in this spec.
	// except Prefix, which is just the first bytes of prefix (spec can be longer)
	LeafSpec *LeafOp `protobuf:"bytes,1,opt,name=leaf_spec,json=leafSpec,proto3" json:"leaf_spec,omitempty"`
	// the minimum length of a prefix in an InnerOp
	// note that the prefix *must not* start with the same bytes as leaf_spec.prefix
	MinInnerPrefix int32 `protobuf:"varint,2,opt,name=min_inner_prefix,json=minInnerPrefix,proto3" json:"min_inner_prefix,omitempty"`
}

func (m *ProofSpec) Reset()         { *m = ProofSpec{} }
func (m *ProofSpec) String() string { return proto.CompactTextString(m) }
func (*ProofSpec) ProtoMessage()    {}
func (*ProofSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_855156e15e7b8e99, []int{4}
}
func (m *ProofSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProofSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProofSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProofSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProofSpec.Merge(m, src)
}
func (m *ProofSpec) XXX_Size() int {
	return m.Size()
}
func (m *ProofSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ProofSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ProofSpec proto.InternalMessageInfo

func (m *ProofSpec) GetLeafSpec() *LeafOp {
	if m != nil {
		return m.LeafSpec
	}
	return nil
}

func (m *ProofSpec) GetMinInnerPrefix() int32 {
	if m != nil {
		return m.MinInnerPrefix
	}
	return 0
}

func init() {
	proto.RegisterEnum("proofs.HashOp", HashOp_name, HashOp_value)
	proto.RegisterEnum("proofs.LengthOp", LengthOp_name, LengthOp_value)
	proto.RegisterType((*ExistenceProof)(nil), "proofs.ExistenceProof")
	proto.RegisterType((*ProofOp)(nil), "proofs.ProofOp")
	proto.RegisterType((*LeafOp)(nil), "proofs.LeafOp")
	proto.RegisterType((*InnerOp)(nil), "proofs.InnerOp")
	proto.RegisterType((*ProofSpec)(nil), "proofs.ProofSpec")
}

func init() { proto.RegisterFile("proofs.proto", fileDescriptor_855156e15e7b8e99) }

var fileDescriptor_855156e15e7b8e99 = []byte{
	// 541 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcf, 0x6e, 0xda, 0x40,
	0x10, 0xc6, 0xfd, 0x9f, 0x30, 0x10, 0xb2, 0x5a, 0x45, 0x95, 0x4f, 0x56, 0x64, 0xb5, 0x2a, 0x4a,
	0xa5, 0xb4, 0x81, 0x84, 0x3b, 0x10, 0xa7, 0x58, 0x50, 0xec, 0x2e, 0x24, 0x4a, 0x0f, 0xed, 0x8a,
	0xa0, 0xa5, 0xa0, 0x12, 0xb3, 0xb2, 0x49, 0x95, 0xbc, 0x45, 0xdf, 0xa3, 0x2f, 0xd2, 0x63, 0x0e,
	0x3d, 0xf4, 0x58, 0xc1, 0x8b, 0x54, 0xbb, 0xb6, 0x03, 0x07, 0x0e, 0xbd, 0xcd, 0x7c, 0xf3, 0x9b,
	0xcf, 0x3b, 0x33, 0x32, 0x94, 0x79, 0xbc, 0x58, 0x4c, 0x92, 0x13, 0x1e, 0x2f, 0x96, 0x0b, 0x6c,
	0xa5, 0x99, 0x4b, 0xa1, 0xe2, 0x3d, 0xcc, 0x92, 0x25, 0x8b, 0xc6, 0x2c, 0x14, 0x12, 0x46, 0xa0,
	0x7f, 0x63, 0x8f, 0xb6, 0x7a, 0xa4, 0x56, 0xcb, 0x44, 0x84, 0xf8, 0x10, 0xcc, 0xef, 0xa3, 0xf9,
	0x3d, 0xb3, 0x35, 0xa9, 0xa5, 0x09, 0x7e, 0x05, 0x66, 0xb2, 0x64, 0x3c, 0xb1, 0xf5, 0x23, 0xbd,
	0x5a, 0xaa, 0x1d, 0x9c, 0x64, 0xfe, 0xd2, 0x25, 0xe0, 0x24, 0xad, 0xba, 0x5f, 0xa0, 0x90, 0x29,
	0xf8, 0x25, 0x18, 0x73, 0x36, 0x9a, 0x48, 0xeb, 0x52, 0xad, 0x92, 0x37, 0xf4, 0xd8, 0x68, 0x12,
	0xf0, 0x8e, 0x42, 0x64, 0x15, 0xbf, 0x06, 0x73, 0x16, 0x45, 0x2c, 0x96, 0x5f, 0xdb, 0xf2, 0xf5,
	0x85, 0x28, 0xb9, 0xb4, 0xde, 0x32, 0x40, 0x5b, 0x70, 0xf7, 0xb7, 0x0a, 0x56, 0xea, 0x80, 0x5d,
	0x30, 0xa6, 0xa3, 0x64, 0x2a, 0xfd, 0x2b, 0x1b, 0xff, 0xce, 0x28, 0x99, 0x06, 0x9c, 0xc8, 0x1a,
	0x7e, 0x0b, 0x25, 0x1e, 0x33, 0x11, 0x52, 0x31, 0xa5, 0xb6, 0x13, 0x85, 0x0c, 0xe9, 0xb2, 0x47,
	0x5c, 0x87, 0xfd, 0xbc, 0x21, 0x5d, 0x82, 0xbe, 0xb3, 0xa5, 0x9c, 0x41, 0xd7, 0x72, 0x37, 0x55,
	0xb0, 0xe6, 0x2c, 0xfa, 0xba, 0x9c, 0xda, 0x86, 0xa4, 0xd1, 0x66, 0x56, 0xa1, 0x06, 0x9c, 0x64,
	0x75, 0xfc, 0x02, 0x2c, 0x1e, 0xb3, 0xc9, 0xec, 0xc1, 0x36, 0xe5, 0x72, 0xb3, 0xcc, 0xfd, 0x0c,
	0x85, 0x6c, 0xe0, 0xff, 0x1a, 0x6b, 0x63, 0xa3, 0x6d, 0xdb, 0x08, 0x3d, 0xb9, 0x9f, 0x08, 0x5d,
	0x4f, 0xf5, 0x34, 0x73, 0x6f, 0xa1, 0x28, 0xaf, 0x32, 0xe0, 0x6c, 0x8c, 0xdf, 0x40, 0x51, 0x6c,
	0x9e, 0x26, 0x9c, 0x8d, 0x77, 0x1f, 0x87, 0xec, 0x09, 0x40, 0xc2, 0x55, 0x40, 0x77, 0xb3, 0x88,
	0xca, 0x13, 0xd0, 0xad, 0x6f, 0x9a, 0xa4, 0x72, 0x37, 0x8b, 0xe4, 0x9b, 0x43, 0xa9, 0x1e, 0x5f,
	0x81, 0x95, 0xbe, 0x11, 0x97, 0xa0, 0xd0, 0x0f, 0x68, 0xa7, 0x39, 0xe8, 0x20, 0x05, 0x03, 0x58,
	0x83, 0x4e, 0xb3, 0x76, 0xde, 0x40, 0x6a, 0x16, 0x9f, 0x9f, 0xd6, 0x90, 0x26, 0xe2, 0xae, 0xd7,
	0x6e, 0x37, 0xbb, 0x48, 0xc7, 0xfb, 0x50, 0x24, 0x7e, 0xe8, 0x7d, 0xb8, 0x38, 0x6d, 0xbc, 0x43,
	0x86, 0xe8, 0x6f, 0xf9, 0xc3, 0x76, 0xe0, 0xf7, 0x91, 0x79, 0xfc, 0x53, 0x85, 0xbd, 0x7c, 0x8d,
	0x02, 0xec, 0x07, 0x34, 0x24, 0xde, 0xa5, 0x7f, 0x83, 0x14, 0x91, 0x5e, 0x37, 0x09, 0x0d, 0x49,
	0x30, 0x0c, 0x90, 0x2a, 0xfa, 0x44, 0x4a, 0x7a, 0x21, 0xd2, 0xf0, 0x01, 0x94, 0x2e, 0xfd, 0x1b,
	0xef, 0xa2, 0x5e, 0xa3, 0x2d, 0xff, 0x3d, 0xd2, 0x31, 0x86, 0x4a, 0x2e, 0xf4, 0xfc, 0xe1, 0xb0,
	0xe7, 0x21, 0xe3, 0x19, 0x6a, 0x9c, 0x49, 0xc8, 0x7c, 0x86, 0x1a, 0x67, 0x39, 0x64, 0xe1, 0x43,
	0x40, 0xc4, 0xfb, 0x78, 0xe5, 0x13, 0x8f, 0x0a, 0xb3, 0x4f, 0x43, 0x6f, 0x80, 0x0a, 0xdb, 0xaa,
	0xe8, 0x96, 0xea, 0x5e, 0xcb, 0xfe, 0xb5, 0x72, 0xd4, 0xa7, 0x95, 0xa3, 0xfe, 0x5d, 0x39, 0xea,
	0x8f, 0xb5, 0xa3, 0x3c, 0xad, 0x1d, 0xe5, 0xcf, 0xda, 0x51, 0x6e, 0x2d, 0xf9, 0x23, 0xd6, 0xff,
	0x05, 0x00, 0x00, 0xff, 0xff, 0xd9, 0x81, 0xf0, 0xa6, 0x98, 0x03, 0x00, 0x00,
}

func (m *ExistenceProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExistenceProof) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProofs(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProofs(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if len(m.Steps) > 0 {
		for _, msg := range m.Steps {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintProofs(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ProofOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProofOp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Op != nil {
		nn1, err := m.Op.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *ProofOp_Leaf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Leaf != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProofs(dAtA, i, uint64(m.Leaf.Size()))
		n2, err := m.Leaf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *ProofOp_Inner) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Inner != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProofs(dAtA, i, uint64(m.Inner.Size()))
		n3, err := m.Inner.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *LeafOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeafOp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hash != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProofs(dAtA, i, uint64(m.Hash))
	}
	if m.PrehashKey != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProofs(dAtA, i, uint64(m.PrehashKey))
	}
	if m.PrehashValue != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProofs(dAtA, i, uint64(m.PrehashValue))
	}
	if m.Length != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProofs(dAtA, i, uint64(m.Length))
	}
	if len(m.Prefix) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintProofs(dAtA, i, uint64(len(m.Prefix)))
		i += copy(dAtA[i:], m.Prefix)
	}
	return i, nil
}

func (m *InnerOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InnerOp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hash != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProofs(dAtA, i, uint64(m.Hash))
	}
	if len(m.Prefix) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProofs(dAtA, i, uint64(len(m.Prefix)))
		i += copy(dAtA[i:], m.Prefix)
	}
	if len(m.Suffix) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProofs(dAtA, i, uint64(len(m.Suffix)))
		i += copy(dAtA[i:], m.Suffix)
	}
	return i, nil
}

func (m *ProofSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProofSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LeafSpec != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProofs(dAtA, i, uint64(m.LeafSpec.Size()))
		n4, err := m.LeafSpec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.MinInnerPrefix != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProofs(dAtA, i, uint64(m.MinInnerPrefix))
	}
	return i, nil
}

func encodeVarintProofs(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ExistenceProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovProofs(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovProofs(uint64(l))
	}
	if len(m.Steps) > 0 {
		for _, e := range m.Steps {
			l = e.Size()
			n += 1 + l + sovProofs(uint64(l))
		}
	}
	return n
}

func (m *ProofOp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Op != nil {
		n += m.Op.Size()
	}
	return n
}

func (m *ProofOp_Leaf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Leaf != nil {
		l = m.Leaf.Size()
		n += 1 + l + sovProofs(uint64(l))
	}
	return n
}
func (m *ProofOp_Inner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Inner != nil {
		l = m.Inner.Size()
		n += 1 + l + sovProofs(uint64(l))
	}
	return n
}
func (m *LeafOp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hash != 0 {
		n += 1 + sovProofs(uint64(m.Hash))
	}
	if m.PrehashKey != 0 {
		n += 1 + sovProofs(uint64(m.PrehashKey))
	}
	if m.PrehashValue != 0 {
		n += 1 + sovProofs(uint64(m.PrehashValue))
	}
	if m.Length != 0 {
		n += 1 + sovProofs(uint64(m.Length))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovProofs(uint64(l))
	}
	return n
}

func (m *InnerOp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hash != 0 {
		n += 1 + sovProofs(uint64(m.Hash))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovProofs(uint64(l))
	}
	l = len(m.Suffix)
	if l > 0 {
		n += 1 + l + sovProofs(uint64(l))
	}
	return n
}

func (m *ProofSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LeafSpec != nil {
		l = m.LeafSpec.Size()
		n += 1 + l + sovProofs(uint64(l))
	}
	if m.MinInnerPrefix != 0 {
		n += 1 + sovProofs(uint64(m.MinInnerPrefix))
	}
	return n
}

func sovProofs(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProofs(x uint64) (n int) {
	return sovProofs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExistenceProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProofs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExistenceProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExistenceProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProofs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProofs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProofs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProofs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProofs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProofs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Steps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProofs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProofs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProofs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Steps = append(m.Steps, &ProofOp{})
			if err := m.Steps[len(m.Steps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProofs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProofs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProofs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProofOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProofs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProofOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProofOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leaf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProofs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProofs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProofs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LeafOp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &ProofOp_Leaf{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProofs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProofs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProofs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InnerOp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &ProofOp_Inner{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProofs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProofs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProofs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeafOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProofs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeafOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeafOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProofs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= HashOp(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrehashKey", wireType)
			}
			m.PrehashKey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProofs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrehashKey |= HashOp(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrehashValue", wireType)
			}
			m.PrehashValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProofs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrehashValue |= HashOp(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProofs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= LengthOp(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProofs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProofs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProofs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = append(m.Prefix[:0], dAtA[iNdEx:postIndex]...)
			if m.Prefix == nil {
				m.Prefix = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProofs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProofs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProofs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InnerOp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProofs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InnerOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InnerOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProofs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= HashOp(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProofs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProofs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProofs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = append(m.Prefix[:0], dAtA[iNdEx:postIndex]...)
			if m.Prefix == nil {
				m.Prefix = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suffix", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProofs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProofs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProofs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suffix = append(m.Suffix[:0], dAtA[iNdEx:postIndex]...)
			if m.Suffix == nil {
				m.Suffix = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProofs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProofs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProofs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProofSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProofs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProofSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProofSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeafSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProofs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProofs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProofs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LeafSpec == nil {
				m.LeafSpec = &LeafOp{}
			}
			if err := m.LeafSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinInnerPrefix", wireType)
			}
			m.MinInnerPrefix = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProofs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinInnerPrefix |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProofs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProofs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProofs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProofs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProofs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProofs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProofs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProofs
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthProofs
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProofs
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProofs(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthProofs
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProofs = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProofs   = fmt.Errorf("proto: integer overflow")
)
